//
//  ViewController.swift
//  Concetration
//
//  Created by –õ–µ–æ–Ω–∏–¥ –®–µ–ª—É–¥—å–∫–æ on 26.10.2022.
//

import UIKit

class ViewController: UIViewController {
    
    private lazy var game = ConcentrationGame(numberOfPairsOfCards: numberOfPairsOfCards)
    
    var numberOfPairsOfCards : Int {                // –∫–æ–ª-–≤–æ  –ø–∞—Ä–Ω—ã—Ö –∫–∞—Ä—Ç
        return (buttonCollection.count + 1) / 2
    }
    

    private func updateTOuches() {
        let attributes: [NSAttributedString.Key: Any] = [
            .strokeWidth: 5.0,
            .strokeColor: UIColor.red
        ]
        let attributesString = NSAttributedString(string: "Touches: \(touches)", attributes: attributes)
        touchLabel.attributedText = attributesString
    }
    
    private(set) var touches = 0 {
        didSet{
            updateTOuches()
        }
    }
    
    
    
    
    
   //private var emojiCollection = ["ü¶ä", "üê∞", "üêπ", "ü¶Å", "üêô", "üê∏", "üê∂", "üêµ", "üê∑", "ü™±", "üê£", "üêå"]
    
   private var emojiCollection = "ü¶äüê∞üêπü¶Åüêôüê∏üê∂üêµüê∑ü™±üê£üêå"
    
   private var emojiDictionary = [Card: String]()
    
   private func emojiIdentifier(for card: Card) -> String {
        if emojiDictionary[card] == nil {
            let randomStingIndex = emojiCollection.index(emojiCollection.startIndex, offsetBy: emojiCollection.count.arc4randomExtension)
            emojiDictionary[card] = String(emojiCollection.remove(at: randomStingIndex)) //—É–±—Ä–∞—Ç—å –∏–∑ (—á–µ—Ä–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–µ–Ω–∏–µ –≤—ã–∑–≤–∞–ª–∏                                                                                                              —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ)
        }
        return emojiDictionary[card] ?? "?"
    }
    
   private func updateViewFromModel () {
        for index in buttonCollection.indices {
            let button = buttonCollection[index]
            let card = game.cards[index]
            
            if card.isFaceUp {
                button.setTitle(emojiIdentifier(for: card), for: .normal)
                button.backgroundColor = #colorLiteral(red: 1, green: 1, blue: 1, alpha: 1)
            } else {
                button.setTitle("", for: .normal) //setTitle - –º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–Ω–∏–µ
                button.backgroundColor = card.isMatched ?  #colorLiteral(red: 1, green: 1, blue: 1, alpha: 0) : #colorLiteral(red: 0.154168427, green: 0.4783409834, blue: 1, alpha: 1)
            }
        }
    }
    
    
    @IBOutlet private var buttonCollection: [UIButton]!
    @IBOutlet private weak var touchLabel: UILabel! {
        didSet {
            updateTOuches()
        }
    }
    @IBAction private func buttonAction(_ sender: UIButton) {
        touches += 1
        if let buttonIndex = buttonCollection.firstIndex(of: sender) {   // firstIndex - –ø–µ—Ä–µ–±—Ä–∞—Ç—å –ø–æ –∏–Ω–¥–µ–∫—Å—É
            game.chooseCard(at: buttonIndex) // –ø–µ—Ä–µ–¥–∞–ª–∏ –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞
            
            updateViewFromModel()
        }
    }
    
    
    
    
}

//extension - —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
extension Int {
    var arc4randomExtension : Int {
        if self > 0 {
            return Int(arc4random_uniform(UInt32(self)))      //–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ–π —á–∏—Å–ª–æ
        } else if self < 0 {
            return -Int(arc4random_uniform(UInt32(abs(self)))) //abs - –∞–±—Å–æ–ª—é–Ω–æ–µ —á–∏—Å–ª–æ –≤–æ–∑–≤—Ä—â–∞–µ—Ç (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–µ–ª–∞–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º)
        } else {
            return 0
        }
    }
}
